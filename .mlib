#!make

# Version: 2018-10-18

# Configuration
IDENTIFIER := $(if $(IDENTIFIER),$(IDENTIFIER),'project')
DOCS_FOLDER := $(if $(DOCS_FOLDER),$(DOCS_FOLDER),"docs")
RULES_FOLDER := $(if $(RULES_FOLDER),$(RULES_FOLDER),"rules")
RULES_IDENT := $(if $(RULES_IDENT),$(RULES_IDENT),"rules")

# Internal variables
PROJECT = $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
.DEFAULT_GOAL = default

# Function: fold_start [tag] [title]
define fold_start
	@if [ "${TRAVIS}" = 'true' ]; then \
		echo -n "travis_fold:start:$(1)"; \
	fi

	@echo "\033[33;1m$(2)\033[0m"
endef

# Function: fold_end [tag]
define fold_end
	@if [ "${TRAVIS}" = 'true' ]; then \
		echo "\ntravis_fold:end:$(1)\r"; \
	else \
		echo; \
	fi
endef

# Function: docker_pull [image]
define docker_pull
	@docker pull $(1)
endef

# Function: docker_run [tag] [title] [arguments]
define docker_run
	$(call fold_start,$(1),$(2))
	@docker run --rm -i $(3) || touch $(PROJECT)/.failed
	$(call fold_end,$(1))
	@if [ -e $(PROJECT)/.failed ]; then \
		rm $(PROJECT)/.failed; \
		echo "\033[1;31mFailed\033[0m"; \
		echo; \
	fi
endef

# Function: skip [short]
define skip
	@echo "\033[2;37mSkipping $(1)\033[0m"
	@echo
endef

# RULES

RULE_CLEAN=$(shell (test -e $(PROJECT)/target && echo true) || echo false)
#RULE_EXAMPLE=$(shell (test "0" = "$(shell ls $(PROJECT)/rules/*/example | wc -l)" && echo false) || echo true)
RULE_STRUCTURE=$(shell (test -e $(PROJECT)/project.xml && echo true) || echo false)
RULE_DOCS=$(shell (test -e $(PROJECT)/${DOCS_FOLDER} && echo true) || echo false)

.PHONY: clean env example structure schematron rules docs default build

# Rule: default
ifeq "${TRAVIS}" "true"
default: pull build
else
default: clean build ownership
endif

# Rule: build
build: env example structure schematron rules docs

# Rule: pull
pull:
	$(call fold_start,docker_pull,Pulling Docker images)
	$(call docker_pull,alpine:3.6)
	$(call docker_pull,difi/vefa-structure:0.7)
	$(call docker_pull,difi/vefa-validator)
	$(call docker_pull,difi/asciidoctor)
	$(call docker_pull,klakegg/schematron)
	$(call docker_pull,alpine/git)
	$(call fold_end,docker_pull)

# Rule: environment
env:
	$(call docker_run,environment,Creating environment file,\
			-v $(PROJECT):/src \
			-v $(PROJECT)/target:/target \
			-e IDENTIFIER=$(IDENTIFIER) \
			--entrypoint sh \
			-w /src \
			alpine/git \
			tools/script/docker-environment.sh)

# Rule: example
example:
ifeq "$(shell ls $(PROJECT)/rules/*/example | wc -l)" "0"
	$(call skip,example files)
else
	$(call docker_run,examples,Packaging example files,\
			-v $(PROJECT):/src \
			-v $(PROJECT)/target:/target \
			klakegg/schematron \
			sh tools/script/docker-package-examples.sh)
endif

# Rule: structure
structure:
ifeq "$(RULE_STRUCTURE)" "true"
	$(call docker_run,structure,Running vefa-structure,\
			-v $(PROJECT):/src \
			-v $(PROJECT)/target:/target \
			difi/vefa-structure:0.7)
else
	$(call skip,structure)
endif

# Rule: schematron
schematron:
ifeq "$(shell ls rules/*/sch/*.sch | wc -l)" "0"
	$(call skip,schematron)
else
	$(call docker_run,schematron,Packaging Schematron files,\
			-v $(PROJECT):/src \
			-v $(PROJECT)/target:/target \
			klakegg/schematron \
			sh tools/script/docker-package-schematron.sh)
endif

# Rule: rules
rules:
ifeq "$(shell find $(PROJECT) -name buildconfig.xml | wc -l)" "0"
	$(call skip,rules)
else
	$(call docker_run,rules,Running vefa-validator,\
			-v $(PROJECT):/src \
			difi/vefa-validator \
			build -x -t -n $(RULES_IDENT) -a $(RULES_FOLDER) -target target/validator /src)
endif

# Rule: docs
docs:
ifeq "$(RULE_DOCS)" "true"
	$(call docker_run,docs,Creating documentation,\
			-v $(PROJECT):/documents \
			-v $(PROJECT)/target:/target \
			difi/asciidoctor)
else
	$(call skip,documentation)
endif

# Rule: clean
clean:
ifeq "$(RULE_CLEAN)" "true"
	$(call docker_run,clean,Removing old target folder,\
			-v $(PROJECT):/src \
			alpine:3.6 \
			rm -rf /src/target)
else
	$(call skip,cleaning)
endif

# Rule: ownership
ownership:
	$(call docker_run,ownership,Fixing ownership,\
			-v $(PROJECT):/src \
			alpine:3.6 \
			chown -R $(shell id -g ${USER}).$(shell id -g ${USER}) /src/target)
